// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/f-rambo/cloud-copilot/cluster-runtime/internal/biz"
	"github.com/f-rambo/cloud-copilot/cluster-runtime/internal/conf"
	"github.com/f-rambo/cloud-copilot/cluster-runtime/internal/interfaces"
	"github.com/f-rambo/cloud-copilot/cluster-runtime/internal/repo"
	"github.com/f-rambo/cloud-copilot/cluster-runtime/internal/server"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "github.com/joho/godotenv/autoload"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	clusterUsecase := biz.NewClusterUseCase(logger)
	clusterInterface := interfaces.NewClusterInterface(clusterUsecase, logger)
	appRepoInterface := repo.NewAppRepo(logger)
	appUsecase := biz.NewAppUseCase(bootstrap, appRepoInterface, logger)
	appInterface := interfaces.NewAppInterface(appUsecase, logger)
	projectUseCase := biz.NewProjectUseCase(logger)
	projectInterface := interfaces.NewProjectInterface(projectUseCase, logger)
	serviceRepoInterface := repo.NewServiceRepo(logger)
	serviceUseCase := biz.NewServiceUseCase(serviceRepoInterface, logger)
	serviceInterface := interfaces.NewServiceInterface(serviceUseCase)
	userRepoInterface := repo.NewUserRepo(logger)
	userUseCase := biz.NewUserUseCase(userRepoInterface, logger)
	userInterface := interfaces.NewUserInterface(userUseCase)
	grpcServer := server.NewGRPCServer(bootstrap, clusterInterface, appInterface, projectInterface, serviceInterface, userInterface, logger)
	app := newApp(logger, grpcServer)
	return app, func() {
	}, nil
}
