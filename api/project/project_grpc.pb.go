// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: api/project/project.proto

package project

import (
	context "context"
	common "github.com/f-rambo/cloud-copilot/cluster-runtime/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProjectInterface_CreateNamespace_FullMethodName = "/project.ProjectInterface/CreateNamespace"
	ProjectInterface_GetNamespaces_FullMethodName   = "/project.ProjectInterface/GetNamespaces"
)

// ProjectInterfaceClient is the client API for ProjectInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectInterfaceClient interface {
	CreateNamespace(ctx context.Context, in *CreateNamespaceReq, opts ...grpc.CallOption) (*common.Msg, error)
	GetNamespaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Namesapces, error)
}

type projectInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectInterfaceClient(cc grpc.ClientConnInterface) ProjectInterfaceClient {
	return &projectInterfaceClient{cc}
}

func (c *projectInterfaceClient) CreateNamespace(ctx context.Context, in *CreateNamespaceReq, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ProjectInterface_CreateNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInterfaceClient) GetNamespaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Namesapces, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Namesapces)
	err := c.cc.Invoke(ctx, ProjectInterface_GetNamespaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectInterfaceServer is the server API for ProjectInterface service.
// All implementations must embed UnimplementedProjectInterfaceServer
// for forward compatibility.
type ProjectInterfaceServer interface {
	CreateNamespace(context.Context, *CreateNamespaceReq) (*common.Msg, error)
	GetNamespaces(context.Context, *emptypb.Empty) (*Namesapces, error)
	mustEmbedUnimplementedProjectInterfaceServer()
}

// UnimplementedProjectInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProjectInterfaceServer struct{}

func (UnimplementedProjectInterfaceServer) CreateNamespace(context.Context, *CreateNamespaceReq) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedProjectInterfaceServer) GetNamespaces(context.Context, *emptypb.Empty) (*Namesapces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaces not implemented")
}
func (UnimplementedProjectInterfaceServer) mustEmbedUnimplementedProjectInterfaceServer() {}
func (UnimplementedProjectInterfaceServer) testEmbeddedByValue()                          {}

// UnsafeProjectInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectInterfaceServer will
// result in compilation errors.
type UnsafeProjectInterfaceServer interface {
	mustEmbedUnimplementedProjectInterfaceServer()
}

func RegisterProjectInterfaceServer(s grpc.ServiceRegistrar, srv ProjectInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedProjectInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProjectInterface_ServiceDesc, srv)
}

func _ProjectInterface_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInterfaceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInterface_CreateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInterfaceServer).CreateNamespace(ctx, req.(*CreateNamespaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInterface_GetNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInterfaceServer).GetNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInterface_GetNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInterfaceServer).GetNamespaces(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectInterface_ServiceDesc is the grpc.ServiceDesc for ProjectInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.ProjectInterface",
	HandlerType: (*ProjectInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _ProjectInterface_CreateNamespace_Handler,
		},
		{
			MethodName: "GetNamespaces",
			Handler:    _ProjectInterface_GetNamespaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/project/project.proto",
}
