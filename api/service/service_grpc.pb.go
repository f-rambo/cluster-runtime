// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: api/service/service.proto

package service

import (
	context "context"
	common "github.com/f-rambo/cloud-copilot/cluster-runtime/api/common"
	biz "github.com/f-rambo/cloud-copilot/cluster-runtime/internal/biz"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceInterface_ApplyService_FullMethodName   = "/clusterruntime.api.service.ServiceInterface/ApplyService"
	ServiceInterface_GetSerice_FullMethodName      = "/clusterruntime.api.service.ServiceInterface/GetSerice"
	ServiceInterface_CommitWorklfow_FullMethodName = "/clusterruntime.api.service.ServiceInterface/CommitWorklfow"
	ServiceInterface_GetWorkflow_FullMethodName    = "/clusterruntime.api.service.ServiceInterface/GetWorkflow"
)

// ServiceInterfaceClient is the client API for ServiceInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceInterfaceClient interface {
	ApplyService(ctx context.Context, in *ApplyServiceRequest, opts ...grpc.CallOption) (*common.Msg, error)
	GetSerice(ctx context.Context, in *biz.Service, opts ...grpc.CallOption) (*biz.Service, error)
	CommitWorklfow(ctx context.Context, in *biz.Workflow, opts ...grpc.CallOption) (*common.Msg, error)
	GetWorkflow(ctx context.Context, in *biz.Workflow, opts ...grpc.CallOption) (*biz.Workflow, error)
}

type serviceInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceInterfaceClient(cc grpc.ClientConnInterface) ServiceInterfaceClient {
	return &serviceInterfaceClient{cc}
}

func (c *serviceInterfaceClient) ApplyService(ctx context.Context, in *ApplyServiceRequest, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ServiceInterface_ApplyService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) GetSerice(ctx context.Context, in *biz.Service, opts ...grpc.CallOption) (*biz.Service, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(biz.Service)
	err := c.cc.Invoke(ctx, ServiceInterface_GetSerice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) CommitWorklfow(ctx context.Context, in *biz.Workflow, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ServiceInterface_CommitWorklfow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) GetWorkflow(ctx context.Context, in *biz.Workflow, opts ...grpc.CallOption) (*biz.Workflow, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(biz.Workflow)
	err := c.cc.Invoke(ctx, ServiceInterface_GetWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceInterfaceServer is the server API for ServiceInterface service.
// All implementations must embed UnimplementedServiceInterfaceServer
// for forward compatibility.
type ServiceInterfaceServer interface {
	ApplyService(context.Context, *ApplyServiceRequest) (*common.Msg, error)
	GetSerice(context.Context, *biz.Service) (*biz.Service, error)
	CommitWorklfow(context.Context, *biz.Workflow) (*common.Msg, error)
	GetWorkflow(context.Context, *biz.Workflow) (*biz.Workflow, error)
	mustEmbedUnimplementedServiceInterfaceServer()
}

// UnimplementedServiceInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceInterfaceServer struct{}

func (UnimplementedServiceInterfaceServer) ApplyService(context.Context, *ApplyServiceRequest) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyService not implemented")
}
func (UnimplementedServiceInterfaceServer) GetSerice(context.Context, *biz.Service) (*biz.Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSerice not implemented")
}
func (UnimplementedServiceInterfaceServer) CommitWorklfow(context.Context, *biz.Workflow) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitWorklfow not implemented")
}
func (UnimplementedServiceInterfaceServer) GetWorkflow(context.Context, *biz.Workflow) (*biz.Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedServiceInterfaceServer) mustEmbedUnimplementedServiceInterfaceServer() {}
func (UnimplementedServiceInterfaceServer) testEmbeddedByValue()                          {}

// UnsafeServiceInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceInterfaceServer will
// result in compilation errors.
type UnsafeServiceInterfaceServer interface {
	mustEmbedUnimplementedServiceInterfaceServer()
}

func RegisterServiceInterfaceServer(s grpc.ServiceRegistrar, srv ServiceInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedServiceInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceInterface_ServiceDesc, srv)
}

func _ServiceInterface_ApplyService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).ApplyService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_ApplyService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).ApplyService(ctx, req.(*ApplyServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_GetSerice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(biz.Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).GetSerice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_GetSerice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).GetSerice(ctx, req.(*biz.Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_CommitWorklfow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(biz.Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).CommitWorklfow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_CommitWorklfow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).CommitWorklfow(ctx, req.(*biz.Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(biz.Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_GetWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).GetWorkflow(ctx, req.(*biz.Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceInterface_ServiceDesc is the grpc.ServiceDesc for ServiceInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterruntime.api.service.ServiceInterface",
	HandlerType: (*ServiceInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyService",
			Handler:    _ServiceInterface_ApplyService_Handler,
		},
		{
			MethodName: "GetSerice",
			Handler:    _ServiceInterface_GetSerice_Handler,
		},
		{
			MethodName: "CommitWorklfow",
			Handler:    _ServiceInterface_CommitWorklfow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _ServiceInterface_GetWorkflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/service/service.proto",
}
