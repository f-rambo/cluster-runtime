// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: api/app/app.proto

package app

import (
	context "context"
	common "github.com/f-rambo/cloud-copilot/cluster-runtime/api/common"
	biz "github.com/f-rambo/cloud-copilot/cluster-runtime/internal/biz"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppInterface_UploadApp_FullMethodName                = "/clusterruntime.api.app.AppInterface/UploadApp"
	AppInterface_CheckCluster_FullMethodName             = "/clusterruntime.api.app.AppInterface/CheckCluster"
	AppInterface_InstallBasicComponent_FullMethodName    = "/clusterruntime.api.app.AppInterface/InstallBasicComponent"
	AppInterface_GetAppReleaseResources_FullMethodName   = "/clusterruntime.api.app.AppInterface/GetAppReleaseResources"
	AppInterface_DeleteApp_FullMethodName                = "/clusterruntime.api.app.AppInterface/DeleteApp"
	AppInterface_DeleteAppVersion_FullMethodName         = "/clusterruntime.api.app.AppInterface/DeleteAppVersion"
	AppInterface_GetAppAndVersionInfo_FullMethodName     = "/clusterruntime.api.app.AppInterface/GetAppAndVersionInfo"
	AppInterface_AppRelease_FullMethodName               = "/clusterruntime.api.app.AppInterface/AppRelease"
	AppInterface_ReloadAppReleaseResource_FullMethodName = "/clusterruntime.api.app.AppInterface/ReloadAppReleaseResource"
	AppInterface_DeleteAppRelease_FullMethodName         = "/clusterruntime.api.app.AppInterface/DeleteAppRelease"
	AppInterface_AddAppRepo_FullMethodName               = "/clusterruntime.api.app.AppInterface/AddAppRepo"
	AppInterface_GetAppsByRepo_FullMethodName            = "/clusterruntime.api.app.AppInterface/GetAppsByRepo"
	AppInterface_GetAppDetailByRepo_FullMethodName       = "/clusterruntime.api.app.AppInterface/GetAppDetailByRepo"
)

// AppInterfaceClient is the client API for AppInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppInterfaceClient interface {
	UploadApp(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*GetAppAndVersionInfo, error)
	CheckCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckClusterResponse, error)
	InstallBasicComponent(ctx context.Context, in *InstallBasicComponentReq, opts ...grpc.CallOption) (*InstallBasicComponentResponse, error)
	GetAppReleaseResources(ctx context.Context, in *biz.AppRelease, opts ...grpc.CallOption) (*AppReleaseResourceItems, error)
	DeleteApp(ctx context.Context, in *biz.App, opts ...grpc.CallOption) (*common.Msg, error)
	DeleteAppVersion(ctx context.Context, in *DeleteAppVersionReq, opts ...grpc.CallOption) (*common.Msg, error)
	GetAppAndVersionInfo(ctx context.Context, in *GetAppAndVersionInfo, opts ...grpc.CallOption) (*GetAppAndVersionInfo, error)
	AppRelease(ctx context.Context, in *AppReleaseReq, opts ...grpc.CallOption) (*biz.AppRelease, error)
	ReloadAppReleaseResource(ctx context.Context, in *biz.AppReleaseResource, opts ...grpc.CallOption) (*common.Msg, error)
	DeleteAppRelease(ctx context.Context, in *biz.AppRelease, opts ...grpc.CallOption) (*common.Msg, error)
	AddAppRepo(ctx context.Context, in *biz.AppRepo, opts ...grpc.CallOption) (*biz.AppRepo, error)
	GetAppsByRepo(ctx context.Context, in *biz.AppRepo, opts ...grpc.CallOption) (*AppItems, error)
	GetAppDetailByRepo(ctx context.Context, in *GetAppDetailByRepoReq, opts ...grpc.CallOption) (*biz.App, error)
}

type appInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppInterfaceClient(cc grpc.ClientConnInterface) AppInterfaceClient {
	return &appInterfaceClient{cc}
}

func (c *appInterfaceClient) UploadApp(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*GetAppAndVersionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppAndVersionInfo)
	err := c.cc.Invoke(ctx, AppInterface_UploadApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) CheckCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckClusterResponse)
	err := c.cc.Invoke(ctx, AppInterface_CheckCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) InstallBasicComponent(ctx context.Context, in *InstallBasicComponentReq, opts ...grpc.CallOption) (*InstallBasicComponentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallBasicComponentResponse)
	err := c.cc.Invoke(ctx, AppInterface_InstallBasicComponent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) GetAppReleaseResources(ctx context.Context, in *biz.AppRelease, opts ...grpc.CallOption) (*AppReleaseResourceItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppReleaseResourceItems)
	err := c.cc.Invoke(ctx, AppInterface_GetAppReleaseResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) DeleteApp(ctx context.Context, in *biz.App, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, AppInterface_DeleteApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) DeleteAppVersion(ctx context.Context, in *DeleteAppVersionReq, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, AppInterface_DeleteAppVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) GetAppAndVersionInfo(ctx context.Context, in *GetAppAndVersionInfo, opts ...grpc.CallOption) (*GetAppAndVersionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppAndVersionInfo)
	err := c.cc.Invoke(ctx, AppInterface_GetAppAndVersionInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) AppRelease(ctx context.Context, in *AppReleaseReq, opts ...grpc.CallOption) (*biz.AppRelease, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(biz.AppRelease)
	err := c.cc.Invoke(ctx, AppInterface_AppRelease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) ReloadAppReleaseResource(ctx context.Context, in *biz.AppReleaseResource, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, AppInterface_ReloadAppReleaseResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) DeleteAppRelease(ctx context.Context, in *biz.AppRelease, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, AppInterface_DeleteAppRelease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) AddAppRepo(ctx context.Context, in *biz.AppRepo, opts ...grpc.CallOption) (*biz.AppRepo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(biz.AppRepo)
	err := c.cc.Invoke(ctx, AppInterface_AddAppRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) GetAppsByRepo(ctx context.Context, in *biz.AppRepo, opts ...grpc.CallOption) (*AppItems, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppItems)
	err := c.cc.Invoke(ctx, AppInterface_GetAppsByRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) GetAppDetailByRepo(ctx context.Context, in *GetAppDetailByRepoReq, opts ...grpc.CallOption) (*biz.App, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(biz.App)
	err := c.cc.Invoke(ctx, AppInterface_GetAppDetailByRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppInterfaceServer is the server API for AppInterface service.
// All implementations must embed UnimplementedAppInterfaceServer
// for forward compatibility.
type AppInterfaceServer interface {
	UploadApp(context.Context, *FileUploadRequest) (*GetAppAndVersionInfo, error)
	CheckCluster(context.Context, *emptypb.Empty) (*CheckClusterResponse, error)
	InstallBasicComponent(context.Context, *InstallBasicComponentReq) (*InstallBasicComponentResponse, error)
	GetAppReleaseResources(context.Context, *biz.AppRelease) (*AppReleaseResourceItems, error)
	DeleteApp(context.Context, *biz.App) (*common.Msg, error)
	DeleteAppVersion(context.Context, *DeleteAppVersionReq) (*common.Msg, error)
	GetAppAndVersionInfo(context.Context, *GetAppAndVersionInfo) (*GetAppAndVersionInfo, error)
	AppRelease(context.Context, *AppReleaseReq) (*biz.AppRelease, error)
	ReloadAppReleaseResource(context.Context, *biz.AppReleaseResource) (*common.Msg, error)
	DeleteAppRelease(context.Context, *biz.AppRelease) (*common.Msg, error)
	AddAppRepo(context.Context, *biz.AppRepo) (*biz.AppRepo, error)
	GetAppsByRepo(context.Context, *biz.AppRepo) (*AppItems, error)
	GetAppDetailByRepo(context.Context, *GetAppDetailByRepoReq) (*biz.App, error)
	mustEmbedUnimplementedAppInterfaceServer()
}

// UnimplementedAppInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppInterfaceServer struct{}

func (UnimplementedAppInterfaceServer) UploadApp(context.Context, *FileUploadRequest) (*GetAppAndVersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadApp not implemented")
}
func (UnimplementedAppInterfaceServer) CheckCluster(context.Context, *emptypb.Empty) (*CheckClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCluster not implemented")
}
func (UnimplementedAppInterfaceServer) InstallBasicComponent(context.Context, *InstallBasicComponentReq) (*InstallBasicComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallBasicComponent not implemented")
}
func (UnimplementedAppInterfaceServer) GetAppReleaseResources(context.Context, *biz.AppRelease) (*AppReleaseResourceItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppReleaseResources not implemented")
}
func (UnimplementedAppInterfaceServer) DeleteApp(context.Context, *biz.App) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedAppInterfaceServer) DeleteAppVersion(context.Context, *DeleteAppVersionReq) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppVersion not implemented")
}
func (UnimplementedAppInterfaceServer) GetAppAndVersionInfo(context.Context, *GetAppAndVersionInfo) (*GetAppAndVersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppAndVersionInfo not implemented")
}
func (UnimplementedAppInterfaceServer) AppRelease(context.Context, *AppReleaseReq) (*biz.AppRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRelease not implemented")
}
func (UnimplementedAppInterfaceServer) ReloadAppReleaseResource(context.Context, *biz.AppReleaseResource) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadAppReleaseResource not implemented")
}
func (UnimplementedAppInterfaceServer) DeleteAppRelease(context.Context, *biz.AppRelease) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppRelease not implemented")
}
func (UnimplementedAppInterfaceServer) AddAppRepo(context.Context, *biz.AppRepo) (*biz.AppRepo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppRepo not implemented")
}
func (UnimplementedAppInterfaceServer) GetAppsByRepo(context.Context, *biz.AppRepo) (*AppItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppsByRepo not implemented")
}
func (UnimplementedAppInterfaceServer) GetAppDetailByRepo(context.Context, *GetAppDetailByRepoReq) (*biz.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDetailByRepo not implemented")
}
func (UnimplementedAppInterfaceServer) mustEmbedUnimplementedAppInterfaceServer() {}
func (UnimplementedAppInterfaceServer) testEmbeddedByValue()                      {}

// UnsafeAppInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppInterfaceServer will
// result in compilation errors.
type UnsafeAppInterfaceServer interface {
	mustEmbedUnimplementedAppInterfaceServer()
}

func RegisterAppInterfaceServer(s grpc.ServiceRegistrar, srv AppInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedAppInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppInterface_ServiceDesc, srv)
}

func _AppInterface_UploadApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).UploadApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_UploadApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).UploadApp(ctx, req.(*FileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_CheckCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).CheckCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_CheckCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).CheckCluster(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_InstallBasicComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallBasicComponentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).InstallBasicComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_InstallBasicComponent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).InstallBasicComponent(ctx, req.(*InstallBasicComponentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_GetAppReleaseResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(biz.AppRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).GetAppReleaseResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_GetAppReleaseResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).GetAppReleaseResources(ctx, req.(*biz.AppRelease))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(biz.App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).DeleteApp(ctx, req.(*biz.App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_DeleteAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).DeleteAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_DeleteAppVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).DeleteAppVersion(ctx, req.(*DeleteAppVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_GetAppAndVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppAndVersionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).GetAppAndVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_GetAppAndVersionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).GetAppAndVersionInfo(ctx, req.(*GetAppAndVersionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_AppRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).AppRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_AppRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).AppRelease(ctx, req.(*AppReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_ReloadAppReleaseResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(biz.AppReleaseResource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).ReloadAppReleaseResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_ReloadAppReleaseResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).ReloadAppReleaseResource(ctx, req.(*biz.AppReleaseResource))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_DeleteAppRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(biz.AppRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).DeleteAppRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_DeleteAppRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).DeleteAppRelease(ctx, req.(*biz.AppRelease))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_AddAppRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(biz.AppRepo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).AddAppRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_AddAppRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).AddAppRepo(ctx, req.(*biz.AppRepo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_GetAppsByRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(biz.AppRepo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).GetAppsByRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_GetAppsByRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).GetAppsByRepo(ctx, req.(*biz.AppRepo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_GetAppDetailByRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppDetailByRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).GetAppDetailByRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_GetAppDetailByRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).GetAppDetailByRepo(ctx, req.(*GetAppDetailByRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AppInterface_ServiceDesc is the grpc.ServiceDesc for AppInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterruntime.api.app.AppInterface",
	HandlerType: (*AppInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadApp",
			Handler:    _AppInterface_UploadApp_Handler,
		},
		{
			MethodName: "CheckCluster",
			Handler:    _AppInterface_CheckCluster_Handler,
		},
		{
			MethodName: "InstallBasicComponent",
			Handler:    _AppInterface_InstallBasicComponent_Handler,
		},
		{
			MethodName: "GetAppReleaseResources",
			Handler:    _AppInterface_GetAppReleaseResources_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AppInterface_DeleteApp_Handler,
		},
		{
			MethodName: "DeleteAppVersion",
			Handler:    _AppInterface_DeleteAppVersion_Handler,
		},
		{
			MethodName: "GetAppAndVersionInfo",
			Handler:    _AppInterface_GetAppAndVersionInfo_Handler,
		},
		{
			MethodName: "AppRelease",
			Handler:    _AppInterface_AppRelease_Handler,
		},
		{
			MethodName: "ReloadAppReleaseResource",
			Handler:    _AppInterface_ReloadAppReleaseResource_Handler,
		},
		{
			MethodName: "DeleteAppRelease",
			Handler:    _AppInterface_DeleteAppRelease_Handler,
		},
		{
			MethodName: "AddAppRepo",
			Handler:    _AppInterface_AddAppRepo_Handler,
		},
		{
			MethodName: "GetAppsByRepo",
			Handler:    _AppInterface_GetAppsByRepo_Handler,
		},
		{
			MethodName: "GetAppDetailByRepo",
			Handler:    _AppInterface_GetAppDetailByRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/app/app.proto",
}
